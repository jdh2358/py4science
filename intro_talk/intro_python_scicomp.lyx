#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass beamer
\begin_preamble
% Include only certain frames - this speeds up compilation
% The frames to be included need to be labeled, by using ERT
% as [label=LABELNAME] (no backslashes or {})
%\includeonlyframes{currentt}

% To make a printable handout (one page per frame), pass
% the handout option to the doc class (Layout menu)

% For good fonts in PDFs, use pslatex fonts (Layout menu)

% Colors and symbols
\usepackage{latexsym}
\usepackage{color}

% Display covered items in transparent form (as opposed
% to not showing them at all)
\newcommand{\coveredinvisible}{
    \setbeamercovered{invisible}
}
\newcommand{\coveredvisible}{
    \setbeamercovered{highly dynamic}
}

% Choose default setting here:
\coveredvisible

\newcommand{\ps}{\vspace{-4mm} }

% Theme configuration.  I've basically built a custom theme out of 
% Warsaw, adding infoline and changing the nav. symbol bar

% Warning: the commands below are order-sensitive!

% load the infolines theme, b/c I want the headline Warsaw 
% uses (split), but the footline from infolines.
% In the document body, these will be deactivated for the title and
% turned on later
\useoutertheme{infolines}
% Main theme
\usetheme{Warsaw}
% Adjust the color for the center (title) box to be that of
% infolines, which Warsaw changes
\setbeamercolor*{title in head/foot}{parent=palette secondary}

% Define a minimal set of navigation symbols
\defbeamertemplate*{navigation symbols}{minmal}
{%
  \hbox{%
    \hbox{\insertframenavigationsymbol}
    \hbox{\insertdocnavigationsymbol}
    \hbox{\insertbackfindforwardnavigationsymbol}%
  }%
}
% activate the minimal navbar
\setbeamertemplate{navigation symbols}[minimal]

%%%%% HACK %%%%%
% I started getting errors because LyX is emmitting a color 'none'
% call, which confuses xcolor.  I'm defining 'none' to be black here.
\definecolor{none}{cmyk}{0,0,0,1}
%%%%% /HACK %%%%%
\end_preamble
\options compress
\language english
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\cite_engine basic
\use_bibtopic false
\paperorientation landscape
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Some things to fix in a future version:
\end_layout

\begin_layout Standard
- trim a bit of time
\end_layout

\begin_layout Standard
- add more about ipython and my own python work, reduce that of others
\end_layout

\begin_layout Standard
- add a final python pros/cons, esp.
 the cons part.
 It will make things more balanced.
\end_layout

\begin_layout Standard
- the PDE part repeats a bit the 'python benefits' which were already pounded
 on.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard

% disable the bottom bar for the title and outline pages
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
setbeamertemplate{footline}{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
vspace*{-5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Python in Scientific Computing
\begin_inset OptArg
status open

\begin_layout Standard
Python & Scientific Computing
\end_layout

\end_inset


\end_layout

\begin_layout Subtitle
An Introduction
\end_layout

\begin_layout Author
Fernando\InsetSpace ~
Pérez
\newline

\family typewriter
\size scriptsize
<Fernando.Perez@colorado.edu>
\family default
\size default

\newline
John Hunter
\newline

\family typewriter
\size scriptsize
<jdh2358@gmail.com>
\family default
\size default

\begin_inset OptArg
status open

\begin_layout Standard
FP/JDH
\begin_inset Note Note
status collapsed

\begin_layout Standard
This is used by the 'split' footline theme on the left side of the page
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Applied Mathematics, U.
 of Colorado at Boulder
\newline
Tradelink
\begin_inset Note Note
status open

\begin_layout Standard
- Use the 
\backslash
inst command only if there are several affiliations.
\end_layout

\begin_layout Standard
- Keep it simple, no one is interested in your street address.
\end_layout

\end_inset


\begin_inset OptArg
status open

\begin_layout Standard
CU\InsetSpace ~
Boulder/Tradelink
\begin_inset Note Note
status open

\begin_layout Standard
optional, but mostly needed
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Date
Claremont Colleges
\newline
Oct 27, 2007
\begin_inset OptArg
status open

\begin_layout Standard
Pomona, 10/27/07
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
The following causes the table of contents to be shown at the beginning
 of every Section.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

    
\backslash
tableofcontents[currentsection]
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard

% reactivate the footline
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
setbeamertemplate{footline}[infolines theme]
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

[pausesections]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scientific Computing
\begin_inset OptArg
status open

\begin_layout Standard
SciComp
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Traditional approaches
\begin_inset OptArg
status open

\begin_layout Standard
Status quo
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
FORTRAN, C and C++
\end_layout

\begin_layout Standard

\series bold
\color blue
Caveat:
\series default
\color none
 C++ suffers less from some of these problems, but it has other issues.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Tools from a time when CPU time was more expensive than human time.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Low-level:
\end_layout

\begin_deeper
\begin_layout Itemize
Primitive data types (no good strings, sets, hash tables, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset

).
\end_layout

\begin_layout Itemize
Manual memory management: bugs, bugs, bugs.
 Hard ones.
\end_layout

\begin_layout Itemize
Slow edit/compile/test cycle.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Clumsy access to visualization, quick profiling, text processing, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

No interactive facilities - scientific work is inherently exploratory.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Object Orientation?
\end_layout

\begin_deeper
\begin_layout Itemize
Not a silver bullet, but a very good model for many scientific codes.
\end_layout

\begin_layout Itemize
Non-existent in FORTRAN & C, clumsy and subtle in C++.
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard

\series bold
\color blue
However!
\end_layout

\begin_layout Itemize
They deliver excellent performance.
\end_layout

\begin_layout Itemize
Millions of LOC in existing scientific libraries (LAPACK, BLAS, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset

)
\end_layout

\begin_layout BeginFrame
Higher level tools in the last decade
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Mathematica and Maple: a unique niche I won't address today.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

IDL and Matlab: extremely popular tools in science and engineering.
\end_layout

\begin_deeper
\begin_layout Itemize
Great interactivity, visualization, and extensive libraries.
\end_layout

\begin_layout Itemize
Unpleasant languages for large-scale programs and non-numerical tasks.
\end_layout

\begin_layout Itemize
Expensive/proprietary: lock-in.
\end_layout

\begin_layout Itemize
Often considered `prototyping' tools: this leads to a lot of code rewriting.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

A common approach (I've been there): mix and match multiple tools:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

FORTRAN, C, C++ programs ...
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

driven by Bash/awk/sed/Perl scripts ...
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

which feed them input and take their outputs ...
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

and pass them to Gnuplot, Grace, OpenDX, etc.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Many different syntaxes: 
\color red
huge context switching overhead!
\end_layout

\begin_layout Subsection
Python?
\begin_inset OptArg
status open

\begin_layout Standard
Python
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Python in this context
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

A bytecode-interpreted language (VMs in C, Java and .NET).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color blue
Interactive
\color none
 interpreter provided.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color blue
Free
\color none
 (BSD license), highly portable (Linux, OSX, Solaris, Windows, ...).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Extremely readable syntax (
\color blue

\begin_inset Quotes eld
\end_inset

executable pseudo-code
\begin_inset Quotes erd
\end_inset


\color none
).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color blue
Simple
\color none
: non-professional programmers can become (and remain) proficient with a
 very small effort (c.f.
 C++).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Clean object oriented model, but 
\color blue
not mandatory
\color none
.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Rich built-in types: lists, sets, dictionaries (hash tables), strings, ...
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Very comprehensive standard library (
\color blue
batteries included
\color none
): 
\end_layout

\begin_deeper
\begin_layout Itemize
Text processing, networking protocols, threading, GUIs, ...
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Standard libraries for IDL/Matlab-like arrays (Numeric/numarray).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Easy to wrap existing C, C++ and FORTRAN codes:
\end_layout

\begin_deeper
\begin_layout Itemize
Python bindings for a vast amount of third-party libraries (scientific or
 not).
\end_layout

\begin_layout Itemize
This addresses the speed issues (native python is slow).
\end_layout

\end_deeper
\begin_layout Section
Interlude: Python in the real world
\begin_inset OptArg
status collapsed

\begin_layout Standard
Examples
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
EEG analysis for epilepsy
\begin_inset OptArg
status collapsed

\begin_layout Standard
EEG analysis
\end_layout

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Data analysis for epilepsy surgery
\end_layout

\begin_layout FrameSubtitle
Isolating the origin of drug-resistant epileptic seizures which require
 surgery.
\end_layout

\begin_layout Standard
John Hunter, Department of Pediatric Neurology, University of Chicago.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/mpl_brain1.png
	lyxscale 50
	width 80text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Electrode location in 3D, combined with MRI data
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/mpl_brain2.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Full reconstruction of electrode location
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/mpl_brain3.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Correlation analysis of seizure data
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/mpl_brain4.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Final location of epileptic foci for surgery
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/mpl_brain5.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection
Multiwavelets
\end_layout

\begin_layout BeginFrame
Adaptive, multiwavelet algorithms for integral operators
\end_layout

\begin_layout Standard
Gregory Beylkin, Vani Cheruvu, Fernando Perez.
 Applied Math, U.
 of Colorado at Boulder.
\end_layout

\begin_layout Itemize
Fast application of integral kernels.
 (Partial Differential Equations)
\end_layout

\begin_layout Itemize
Implementation went from 1 to 3 dimensions directly (
\emph on
extremely
\emph default
 unusual).
\end_layout

\begin_layout Itemize
A clean Object Oriented design: the code reads like the underlying math.
\end_layout

\begin_layout Itemize
Very good performance, thanks to NumPy, F2PY and weave.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/rho_2d_surf.png
	lyxscale 80
	width 35text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{1cm}
\end_layout

\end_inset


\begin_inset Graphics
	filename fig/rho_2d_skel.eps
	lyxscale 80
	width 25text%

\end_inset


\end_layout

\begin_layout Subsection
PMV: molecular structures
\begin_inset OptArg
status collapsed

\begin_layout Standard
PMV
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Structural Bio-Informatics
\end_layout

\begin_layout Standard
Michel F.
 Sanner, Molecular Biology Department, The Scripps Research Institute, La
 Jolla, California.
 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scripps.edu/~sanner}

\end_inset


\end_layout

\begin_layout Standard
Full talks: 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scipy.org/wikis/scipy04/ConferenceSchedule}

\end_inset


\color none
.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Applications:
\end_layout

\begin_deeper
\begin_layout Itemize
PMV: Visualization and analysis of biological molecules
\end_layout

\begin_layout Itemize
Vision: Visual programming for Python.
\end_layout

\begin_layout Itemize
PyARTK: Augmented Reality with Applications in Molecular Biology.
\end_layout

\begin_layout Itemize
FlexTree: Python in the flexibility study of biological molecules
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Code
\end_layout

\begin_deeper
\begin_layout Itemize
11 Python packages 
\end_layout

\begin_deeper
\begin_layout Itemize
220,000 lines of code 
\end_layout

\begin_layout Itemize
1370 classes in Python 
\end_layout

\end_deeper
\begin_layout Itemize
10 C and C++ packages 
\end_layout

\begin_deeper
\begin_layout Itemize
200 classes 
\end_layout

\end_deeper
\end_deeper
\begin_layout BeginPlainFrame
PMV: the Python Molecule Viewer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/pmv.png
	lyxscale 50
	width 100text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection
MayaVi: customizable data visualization
\begin_inset OptArg
status open

\begin_layout Standard
MayaVi
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
MayaVi: sophisticated data visualization
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

MayaVi:
\color blue
 
\begin_inset LatexCommand \htmlurl{https://svn.enthought.com/enthought/wiki/MayaVi}

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Free, easy to use scientific data visualizer.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Heavy lifting of OpenGL-based rendering: VTK (a C++ library).
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

A very good example of how to properly use Python:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

MayaVi is a standalone GUI program...
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

but also a Python library callable by any other Python program.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Python: very easy to modify, even by adding at runtime user-defined modules
 which populate the GUI automatically.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

C++: excellent rendering performance, fully hardware-accelerated OpenGL.
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Standard

\series bold
\color blue
The punchline:
\series default
\color none
 fully programmable visualization, with builtin access to all kinds of numerical
 (and other) libraries from within the viz tool.
\end_layout

\begin_layout BeginPlainFrame
FluidLab: a MayaVi based CFD visualization tool
\end_layout

\begin_layout Standard
With: K.
 Julien, P.
 Schmitt and B.
 Barrow (Applied Math, U.
 Colorado).
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/Fluidlab5.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout BeginPlainFrame
Volumetric rendering with FluidLab
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/Fluidlab6.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection
SAGE: System for Algebra and Geometry Experimentation
\begin_inset OptArg
status open

\begin_layout Standard
SAGE
\end_layout

\end_inset


\end_layout

\begin_layout BeginPlainFrame
SAGE
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fig/sage_notebook-medium.jpg
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection*
Others
\end_layout

\begin_layout BeginFrame
A few other projects (URLs in Appendix)
\end_layout

\begin_layout FrameSubtitle
Python is becoming very popular in many different scientific areas
\end_layout

\begin_layout Itemize

\color blue
VPython:
\color none
 easy, real-time 3D programming (Carnegie Mellon, used for an introductory
 mechanics course).
\end_layout

\begin_layout Itemize

\color blue
UCSF Chimera: 
\color none
extensible, interactive molecular graphics program ($$: NIH).
\end_layout

\begin_layout Itemize

\color blue
PyRAF:
\color none
 Hubble Space Telescope interface to IRAF, a standard in astronomical image
 processing.
 The HST develops Numarray, the next generation Python array library.
\end_layout

\begin_layout Itemize

\color blue
BioPython: 
\color none
tools for computational molecular biology.
\end_layout

\begin_layout Itemize

\color blue
VisionEgg:
\color none
 real-time stimuli for vision research experiments (OpenGL).
\end_layout

\begin_layout Itemize

\color blue
Natural Language Toolkit:
\color none
 symbolic and statistical natural language processing.
\end_layout

\begin_layout Itemize

\color blue
Neural Integrator:
\color none
 visual programming for neural networks.
\end_layout

\begin_layout Itemize

\color blue
Orange:
\color none
 component-based data mining software.
\end_layout

\begin_layout Section
Python and Scientific Computing
\begin_inset OptArg
status open

\begin_layout Standard
Python
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Basic features
\begin_inset OptArg
status collapsed

\begin_layout Standard
Python\InsetSpace ~
Basics
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
\begin_inset ERT
status collapsed

\begin_layout Standard

[label=current]
\end_layout

\end_inset

Basic Python features
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

{Meaningful indentation, self-documenting, interactive language}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Examples below: IPython (enhanced interactive environment)
\end_layout

\begin_layout Itemize
Exploratory, incremental development, with live debugging on exceptions.
\end_layout

\begin_layout Itemize
Direct access to the filesystem and OS.
\newline

\family typewriter
\color blue
In [8]:
\color none
 def hypot(a,b): 
\newline

\color blue
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
...:
\color none
 \InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
"Return the length of the hypotenuse." 
\newline

\color blue
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
...:
\color none
 \InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
return sqrt(a**2+b**2) 
\newline

\color blue
In [9]:
\color none
 pdoc hypot 
\newline
Return the length of the hypotenuse.
\newline

\color blue
In [10]:
\color none
 pdef hypot
\newline
hypot(a, b)
\newline

\color blue
In [12]:
\color none
 cd talks/0411_mines/ 
\newline
/home/fperez/talks/0411_mines
\newline

\color blue
In [13]:
\color none
 ls 
\newline
0411_python_scicomp.lyx doublependulum.py* ...
\end_layout

\end_deeper
\begin_layout BeginPlainFrame
Python Basics (2)
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Dictionaries (C-implemented, well optimized hash tables)}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Perfect for building complex, sparse data structures
\family typewriter
\size small
\color blue

\newline
In [21]:
\color none
\InsetSpace ~
dct={'k1':'v1',(3,4):cos,'nest':{1:2}}
\newline

\color blue
In [22]:
\color none
\InsetSpace ~
dct.keys(),\InsetSpace ~
dct.values()
\newline

\color red
Out[22]:
\color none
\InsetSpace ~
(['k1', 'nested', (3, 4)], ['v1', {1: 2}, <built-in function cos>])
\newline

\color blue
In [23]:
\color none
\InsetSpace ~
dct[3,4](pi) 
\newline

\color red
Out[23]:
\color none
\InsetSpace ~
-1.0
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Standard

<+->{Easy access to C/C++ (via SciPy's 
\backslash
texttt{weave.inline}) and FORTRAN (
\backslash
texttt{f2py})}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size small
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [26]:
\color none
 code='std::cout << "a is: " << a << std::endl;'
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [27]:
\color none
 a='Hello world'
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [28]:
\color none
 inline(code,['a']) 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

a is: Hello world
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [29]:
\color none
 a=99
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [30]:
\color none
 inline(code,['a']) 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

a is: 99 
\end_layout

\end_deeper
\begin_layout Subsection
A better development model
\begin_inset OptArg
status collapsed

\begin_layout Standard
Development\InsetSpace ~
Model
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
A different model of development
\end_layout

\begin_layout FrameSubtitle

\emph on
\color red
Global optimization is the root of all evil
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

Never write `
\family typewriter
main()
\family default
' in C anymore: 
\color red
you are optimizing globally!
\end_layout

\begin_deeper
\begin_layout Itemize
Prototype the code in Python.
\end_layout

\begin_layout Itemize
Wrap existing libraries for Python access and reuse them (Numeric, LAPACK,
 VTK, ...)
\end_layout

\begin_layout Itemize
Identify remaining hot spots via 
\color blue
profiling
\color none
.
\end_layout

\begin_layout Itemize
Rewrite 
\color blue
only
\color none
 the code for those hot spots in C/C++/FORTRAN.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset

The resulting code will be production-ready: 
\color blue
no throw-away codes
\color none
.
\end_layout

\begin_deeper
\begin_layout Itemize
Make your code available as a library for 
\color blue
interactive use
\color none
.
\end_layout

\begin_layout Itemize
Integrate plotting, visualization, logging, ..., into your objects.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color blue
Apply this to existing codes
\color none
 
\end_layout

\begin_deeper
\begin_layout Itemize
Break them into a library core and control layers.
\end_layout

\begin_layout Itemize
Wrap the libraries and expose them to Python.
\end_layout

\begin_layout Itemize
Write all new control as quick, light Python scripts.
\end_layout

\end_deeper
\begin_layout Section*
Summary
\end_layout

\begin_layout BeginFrame
Summary
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color blue
Python
\end_layout

\begin_deeper
\begin_layout Itemize
An excellent language for scientific computing development.
\end_layout

\begin_layout Itemize
Scales from interactive exploration to full-blown production codes.
\end_layout

\begin_layout Itemize
Accessible to scientists who are not professional programmers.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vskip0pt plus.5fill
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->
\end_layout

\end_inset


\color red
Outlook
\end_layout

\begin_deeper
\begin_layout Itemize
SciPy, matplotlib, IPython, MayaVi, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
ldots
\end_layout

\end_inset

 are moving forward and improving.
\end_layout

\begin_layout Itemize
At the end of the course, you should be able to start using Python productively
 for your work.
\end_layout

\begin_layout Itemize
These projects are all Open Source: if you find a flaw, a bug, or a missing
 feature,
\emph on
\color blue
 jump on board!
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Section*
\start_of_appendix
\begin_inset Note Note
status open

\begin_layout Standard
All of the following is optional and typically not needed.
\end_layout

\end_inset

Appendix
\end_layout

\begin_layout Subsection*
URLs
\end_layout

\begin_layout BeginFrame
Some useful URLs
\end_layout

\begin_layout Itemize
A collection of links on Python and Scientific Computing:
\color blue

\newline

\begin_inset LatexCommand \htmlurl{http://amath.colorado.edu/faculty/fperez/python/scicomp}

\end_inset


\end_layout

\begin_layout Itemize
SciPy: 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scipy.org}

\end_inset


\end_layout

\begin_layout Itemize
IPython, an improved interactive shell
\color blue
:
\newline

\begin_inset LatexCommand \htmlurl{http://ipython.scipy.org}

\end_inset


\end_layout

\begin_layout Itemize
Matplotlib, 2d plotting with Matlab syntax
\color blue
:
\newline

\begin_inset LatexCommand \htmlurl{http://matplotlib.sourceforge.net}

\end_inset


\end_layout

\begin_layout Itemize
MayaVi, 3d data visualization:
\color blue

\newline

\begin_inset LatexCommand \htmlurl{http://mayavi.sourceforge.net}

\end_inset


\end_layout

\begin_layout Itemize
PyX, programmatic PostScript generation (with 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
LaTeX 
\end_layout

\end_inset

 support)
\color blue
:
\newline

\begin_inset LatexCommand \htmlurl{http://pyx.sourceforge.net}

\end_inset


\end_layout

\begin_layout Itemize
F2Py (FORTRAN): 
\color blue

\begin_inset LatexCommand \htmlurl{http://cens.ioc.ee/projects/f2py2e}

\end_inset


\color none
 
\end_layout

\begin_layout Itemize
SWIG (C/C++ for Python): 
\color blue

\begin_inset LatexCommand \htmlurl{http://swig.org}

\end_inset


\end_layout

\begin_layout BeginFrame
URLs for projects mentioned earlier
\end_layout

\begin_layout Itemize
VPython, real-time 3D: 
\color blue

\begin_inset LatexCommand \htmlurl{http://vpython.org}

\end_inset


\end_layout

\begin_layout Itemize
UCSF Chimera - interactive molecular graphics
\color blue
:
\newline

\begin_inset LatexCommand \htmlurl{http://www.cgl.ucsf.edu/chimera}

\end_inset


\end_layout

\begin_layout Itemize
PyRAF - Hubble Space Telescope interface to IRAF
\color blue
:
\newline

\begin_inset LatexCommand \htmlurl{http://www.stsci.edu/resources/software_hardware/pyraf}

\end_inset


\end_layout

\begin_layout Itemize
BioPython - 
\color blue

\begin_inset LatexCommand \htmlurl{http://biopython.org}

\end_inset


\end_layout

\begin_layout Itemize
VisionEgg - vision research experiments (OpenGL):
\color blue

\newline

\begin_inset LatexCommand \htmlurl{http://www.visionegg.org}

\end_inset


\color none
 
\end_layout

\begin_layout Itemize
Natural Language Toolkit: 
\newline

\color blue

\begin_inset LatexCommand \htmlurl{http://nltk.sourceforge.net}

\end_inset


\end_layout

\begin_layout Itemize
Neural Integrator - visual programming for neural networks:
\newline

\color blue

\begin_inset LatexCommand \htmlurl{http://starship.python.net/crew/seehof/NeuralPython.html}

\end_inset


\end_layout

\begin_layout Itemize
Orange - component-based data mining:
\newline

\color blue

\begin_inset LatexCommand \htmlurl{http://www.ailab.si/orange}

\end_inset


\end_layout

\begin_layout Subsection
Python overview
\end_layout

\begin_layout BeginFrame
An overview of Python's features
\end_layout

\begin_layout FrameSubtitle
A readable, eclectic collection of the best features from many languages.
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

{Data types}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Arbitrary length integers
\newline

\family typewriter
\color blue
In [1]:
\color none
\InsetSpace ~
2**64 
\newline

\color red
Out[1]:
\color none
\InsetSpace ~
18446744073709551616L 
\end_layout

\begin_layout Itemize
Floats (standard C doubles) and complex numbers
\newline

\family typewriter
\color blue
In [4]:
\color none
\InsetSpace ~
1j**2 
\newline

\color red
Out[4]:
\color none
\InsetSpace ~
(-1+0j) 
\end_layout

\begin_layout Itemize
Strings
\newline

\family typewriter
\color blue
In [6]:
\color none
\InsetSpace ~
'hello world'.upper() 
\newline

\color red
Out[6]:
\color none
\InsetSpace ~
'HELLO WORLD' 
\end_layout

\begin_layout Itemize
Lists (arbitrarily nested, variable length)
\newline

\family typewriter
\color blue
In [9]:
\color none
\InsetSpace ~
[99,'hello',1j,['sublist'],99].count(99) 
\newline

\color red
Out[9]:
\color none
\InsetSpace ~
2 
\end_layout

\end_deeper
\begin_layout BeginFrame
Python Basics (2)
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Data types (cont)}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Dictionaries (C-implemented, well optimized hash tables)
\newline

\family typewriter
\size small
\color blue
In [21]:
\color none
\InsetSpace ~
dct={'k1':'v1',2:'v2',(3,4):math.cos,'nest':{1:2}}
\newline

\color blue
In [22]:
\color none
\InsetSpace ~
dct.keys() 
\newline

\color red
Out[22]:
\color none
\InsetSpace ~
['k1', 'nest', 2, (3, 4)]
\newline

\color blue
In [23]:
\color none
\InsetSpace ~
dct.values() 
\newline

\color red
Out[23]:
\color none
\InsetSpace ~
['v1', {1: 2}, 'v2', <built-in function cos>]
\newline

\color blue
In [24]:
\color none
\InsetSpace ~
dct[3,4](math.pi) 
\newline

\color red
Out[24]:
\color none
\InsetSpace ~
-1.0
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Strongly, but dynamically typed}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
One of its major strengths: extreme flexibility.
\end_layout

\begin_layout Itemize
Slow: everything is checked at runtime.
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{15mm}
\end_layout

\end_inset

for x in range(10):
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{15mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
print x**2\InsetSpace ~

\family default
\emph on
\color blue
# x and ** are checked every time!
\end_layout

\end_deeper
\begin_layout BeginFrame
Python Basics (3)
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Interactive}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Efficient for exploratory, incremental development.
\end_layout

\begin_layout Itemize
Live debugging on exceptions.
\end_layout

\begin_layout Itemize
Direct access to the filesystem and OS.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Clean object system}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
With multiple inheritance and operator overloading:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [12]:
\color none
 class simple: 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~

\color blue
....:
\color none
 \InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
def __add__(self,other): 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~

\color blue
....:
\color none
 \InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
print 'Me plus something else:',other
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [13]:
\color none
 a = simple()
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [14]:
\color none
 a + 34
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

Me plus something else:\InsetSpace ~
34 
\end_layout

\end_deeper
\begin_layout BeginPlainFrame
Python Basics (4)
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Functions are first class objects}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\size small
def compose(f,g):
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
return lambda x: f(g(x))
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Easy access to C/C++ (with SciPy's weave.inline module)}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size small
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [26]:
\color none
 code='std::cout << "a is: " << a << std::endl;'
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [27]:
\color none
 a='Hello world'
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [28]:
\color none
 inline(code,['a']) 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

a is: Hello world
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [29]:
\color none
 a=99
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset


\color blue
In [30]:
\color none
 inline(code,['a']) 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

a is: 99 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status collapsed

\begin_layout Standard

<+->{Elegant, simple and expressive: quicksort in 3 lines (Nathan Gray)}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\size small
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

def qsort(L): 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
if len(L) <= 1: return L
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
return qsort( 
\series bold
\color blue
[
\series default
 lt for lt in L[1:] if lt < L[0] 
\series bold
]
\series default
\color none
 ) + 
\backslash
 
\newline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{7mm}
\end_layout

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
[L[0]] + qsort(
\series bold
\color blue
[
\series default
ge for ge in L[1:] if ge >= L[0]
\series bold
]
\series default
\color none
)
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\end_body
\end_document
