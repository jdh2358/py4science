#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass beamer
\begin_preamble
% Include only certain frames - this speeds up compilation
% The frames to be included need to be labeled, by using ERT
% as [label=LABELNAME] (no backslashes or {})
%\includeonlyframes{currentt}

% To make a printable handout (one page per frame), pass
% the handout option to the doc class (Layout menu)

% For good fonts in PDFs, use pslatex fonts (Layout menu)

% Colors and symbols
\usepackage{latexsym}
\usepackage{color}

% Display covered items in transparent form (as opposed
% to not showing them at all)
\newcommand{\coveredinvisible}{
    \setbeamercovered{invisible}
}
\newcommand{\coveredvisible}{
    \setbeamercovered{highly dynamic}
}

% Choose default setting here:
\coveredvisible

\newcommand{\ps}{\vspace{-4mm} }

% Theme configuration.  I've basically built a custom theme out of 
% Warsaw, adding infoline and changing the nav. symbol bar

% Warning: the commands below are order-sensitive!

% load the infolines theme, b/c I want the headline Warsaw 
% uses (split), but the footline from infolines.
% In the document body, these will be deactivated for the title and
% turned on later
\useoutertheme{infolines}
% Main theme
\usetheme{Warsaw}
% Adjust the color for the center (title) box to be that of
% infolines, which Warsaw changes
\setbeamercolor*{title in head/foot}{parent=palette secondary}

% Define a minimal set of navigation symbols
\defbeamertemplate*{navigation symbols}{minmal}
{%
  \hbox{%
    \hbox{\insertframenavigationsymbol}
    \hbox{\insertdocnavigationsymbol}
    \hbox{\insertbackfindforwardnavigationsymbol}%
  }%
}
% activate the minimal navbar
\setbeamertemplate{navigation symbols}[minimal]
\end_preamble
\options compress
\language english
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation landscape
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Standard


\begin_inset Note
collapsed false

\layout Standard

Some things to fix in a future version:
\layout Standard

- trim a bit of time
\layout Standard

- add more about ipython and my own python work, reduce that of others
\layout Standard

- add a final python pros/cons, esp.
 the cons part.
 It will make things more balanced.
\layout Standard

- the PDE part repeats a bit the 'python benefits' which were already pounded
 on.
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard
% disable the bottom bar for the title and outline pages
\layout Standard

\backslash 
setbeamertemplate{footline}{}
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
vspace*{-5mm}
\end_inset 


\layout Title

Python in Scientific Computing
\begin_inset OptArg
collapsed false

\layout Standard

Python & Scientific Computing
\end_inset 


\layout Subtitle

An Introduction
\layout Author

Fernando\SpecialChar ~
Pérez
\newline 

\family typewriter 
\size scriptsize 
<Fernando.Perez@colorado.edu>
\family default 
\size default 

\newline 
Stéfan van der Walt
\newline 

\family typewriter 
\size scriptsize 
<stefan@sun.ac.za>
\family default 
\size default 

\begin_inset OptArg
collapsed false

\layout Standard

FP/SVDW
\begin_inset Note
collapsed true

\layout Standard

This is used by the 'split' footline theme on the left side of the page
\end_inset 


\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{5mm}
\end_inset 


\layout Institute

Applied Mathematics, U.
 of Colorado at Boulder
\newline 
Electronics Engineering, U.
 of Stellenbosch
\begin_inset Note
collapsed false

\layout Standard

- Use the 
\backslash 
inst command only if there are several affiliations.
\layout Standard

- Keep it simple, no one is interested in your street address.
\end_inset 


\begin_inset OptArg
collapsed false

\layout Standard

CU\SpecialChar ~
Boulder/U.
 Stellenbosch
\begin_inset Note
collapsed false

\layout Standard

optional, but mostly needed
\end_inset 


\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{5mm}
\end_inset 


\layout Date

University of Stellenbosch 
\newline 
April 12, 2006
\begin_inset OptArg
collapsed false

\layout Standard

U Stell, 04/12/06
\end_inset 


\layout Standard


\begin_inset Note
collapsed false

\layout Standard

If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
%
\backslash 
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\layout Standard
%
\backslash 
logo{
\backslash 
pgfuseimage{institution-logo}}
\end_inset 


\layout Standard


\begin_inset Note
collapsed false

\layout Standard

The following causes the table of contents to be shown at the beginning
 of every Section.
 Delete this, if you do not want it.
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
AtBeginSection[]{
\layout Standard
  
\backslash 
frame<beamer>{ 
\layout Standard
    
\backslash 
frametitle{Outline}
\layout Standard
    
\backslash 
tableofcontents[currentsection]
\layout Standard
}
\layout Standard
}
\end_inset 


\layout Standard


\begin_inset Note
collapsed false

\layout Standard

If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
%
\backslash 
beamerdefaultoverlayspecification{<+->}
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard
% reactivate the footline
\layout Standard

\backslash 
setbeamertemplate{footline}[infolines theme]
\end_inset 


\layout BeginFrame

Outline
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard
[pausesections]
\end_inset 


\layout Section

Scientific Computing
\begin_inset OptArg
collapsed false

\layout Standard

SciComp
\end_inset 


\layout Subsection

Traditional approaches
\begin_inset OptArg
collapsed false

\layout Standard

Status quo
\end_inset 


\layout BeginFrame

FORTRAN, C and C++
\layout Standard


\series bold 
\color blue
Caveat:
\series default 
\color default
 C++ suffers less from some of these problems, but it has other issues.
\layout Pause

\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Tools from a time when CPU time was more expensive than human time.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Low-level:
\begin_deeper 
\layout Itemize

Primitive data types (no good strings, sets, hash tables, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

).
\layout Itemize

Manual memory management: bugs, bugs, bugs.
 Hard ones.
\layout Itemize

Slow edit/compile/test cycle.
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Clumsy access to visualization, quick profiling, text processing, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 


\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

No interactive facilities - scientific work is inherently exploratory.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Object Orientation?
\begin_deeper 
\layout Itemize

Not a silver bullet, but a very good model for many scientific codes.
\layout Itemize

Non-existent in FORTRAN & C, clumsy and subtle in C++.
\end_deeper 
\layout Pause

\layout Standard


\series bold 
\color blue
However!
\layout Itemize

They deliver excellent performance.
\layout Itemize

Millions of LOC in existing scientific libraries (LAPACK, BLAS, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

)
\layout BeginFrame

Higher level tools in the last decade
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Mathematica and Maple: a unique niche I won't address today.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

IDL and Matlab: extremely popular tools in science and engineering.
\begin_deeper 
\layout Itemize

Great interactivity, visualization, and extensive libraries.
\layout Itemize

Unpleasant languages for large-scale programs and non-numerical tasks.
\layout Itemize

Expensive/proprietary: lock-in.
\layout Itemize

Often considered `prototyping' tools: this leads to a lot of code rewriting.
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

A common approach (I've been there): mix and match multiple tools:
\begin_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

FORTRAN, C, C++ programs ...
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

driven by Bash/awk/sed/Perl scripts ...
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

which feed them input and take their outputs ...
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

and pass them to Gnuplot, Grace, OpenDX, etc.
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Many different syntaxes: 
\color red
huge context switching overhead!
\layout Subsection

Python?
\begin_inset OptArg
collapsed false

\layout Standard

Python
\end_inset 


\layout BeginFrame

Python in this context
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

A bytecode-interpreted language (VMs in C, Java and .NET).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color blue
Interactive
\color default
 interpreter provided.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color blue
Free
\color default
 (BSD license), highly portable (Linux, OSX, Solaris, Windows, ...).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Extremely readable syntax (
\color blue

\begin_inset Quotes eld
\end_inset 

executable pseudo-code
\begin_inset Quotes erd
\end_inset 


\color default
).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color blue
Simple
\color default
: non-professional programmers can become (and remain) proficient with a
 very small effort (c.f.
 C++).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Clean object oriented model, but 
\color blue
not mandatory
\color default
.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Rich built-in types: lists, sets, dictionaries (hash tables), strings, ...
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Very comprehensive standard library (
\color blue
batteries included
\color default
): 
\begin_deeper 
\layout Itemize

Text processing, networking protocols, threading, GUIs, ...
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Standard libraries for IDL/Matlab-like arrays (Numeric/numarray).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Easy to wrap existing C, C++ and FORTRAN codes:
\begin_deeper 
\layout Itemize

Python bindings for a vast amount of third-party libraries (scientific or
 not).
\layout Itemize

This addresses the speed issues (native python is slow).
\end_deeper 
\layout Section

Interlude: Python in the real world
\begin_inset OptArg
collapsed true

\layout Standard

Examples
\end_inset 


\layout Subsection

EEG analysis for epilepsy
\begin_inset OptArg
collapsed true

\layout Standard

EEG analysis
\end_inset 


\layout BeginPlainFrame

Data analysis for epilepsy surgery
\layout FrameSubtitle

Isolating the origin of drug-resistant epileptic seizures which require
 surgery.
\layout Standard

John Hunter, Department of Pediatric Neurology, University of Chicago.
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/mpl_brain1.png
	lyxscale 50
	width 80text%
	keepAspectRatio

\end_inset 


\layout BeginPlainFrame

Electrode location in 3D, combined with MRI data
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/mpl_brain2.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset 


\layout BeginPlainFrame

Full reconstruction of electrode location
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/mpl_brain3.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset 


\layout BeginPlainFrame

Correlation analysis of seizure data
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/mpl_brain4.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset 


\layout BeginPlainFrame

Final location of epileptic foci for surgery
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/mpl_brain5.png
	lyxscale 50
	width 90text%
	keepAspectRatio

\end_inset 


\layout Subsection

Multiwavelets
\layout BeginFrame

Adaptive, multiwavelet algorithms for integral operators
\layout Standard

Gregory Beylkin, Vani Cheruvu, Fernando Perez.
 Applied Math, U.
 of Colorado at Boulder.
\layout Itemize

Fast application of integral kernels.
 (Partial Differential Equations)
\layout Itemize

Implementation went from 1 to 3 dimensions directly (
\emph on 
extremely
\emph default 
 unusual).
\layout Itemize

A clean Object Oriented design: the code reads like the underlying math.
\layout Itemize

Very good performance, thanks to NumPy, F2PY and weave.
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/rho_2d_surf.png
	lyxscale 80
	width 35text%

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{1cm}
\end_inset 


\begin_inset Graphics
	filename fig/rho_2d_skel.eps
	lyxscale 80
	width 25text%

\end_inset 


\layout Subsection

PMV: molecular structures
\begin_inset OptArg
collapsed true

\layout Standard

PMV
\end_inset 


\layout BeginFrame

Structural Bio-Informatics
\layout Standard

Michel F.
 Sanner, Molecular Biology Department, The Scripps Research Institute, La
 Jolla, California.
 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scripps.edu/~sanner}

\end_inset 


\layout Standard

Full talks: 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scipy.org/wikis/scipy04/ConferenceSchedule}

\end_inset 


\color default
.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Applications:
\begin_deeper 
\layout Itemize

PMV: Visualization and analysis of biological molecules
\layout Itemize

Vision: Visual programming for Python.
\layout Itemize

PyARTK: Augmented Reality with Applications in Molecular Biology.
\layout Itemize

FlexTree: Python in the flexibility study of biological molecules
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Code
\begin_deeper 
\layout Itemize

11 Python packages 
\begin_deeper 
\layout Itemize

220,000 lines of code 
\layout Itemize

1370 classes in Python 
\end_deeper 
\layout Itemize

10 C and C++ packages 
\begin_deeper 
\layout Itemize

200 classes 
\end_deeper 
\end_deeper 
\layout BeginPlainFrame

PMV: the Python Molecule Viewer
\layout Standard
\align center 

\begin_inset Graphics
	filename fig/pmv.png
	lyxscale 50
	width 100text%
	keepAspectRatio

\end_inset 


\layout Subsection

MayaVi: data visualization
\begin_inset OptArg
collapsed true

\layout Standard

MayaVi
\end_inset 


\layout BeginFrame

MayaVi: sophisticated data visualization
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

MayaVi:
\color blue
 
\begin_inset LatexCommand \htmlurl{http://mayavi.sourceforge.net}

\end_inset 


\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Free, easy to use scientific data visualizer.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Heavy lifting of OpenGL-based rendering: VTK (a C++ library).
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

A very good example of how to properly use Python:
\begin_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

MayaVi is a standalone GUI program...
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

but also a Python library callable by any other Python program.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Python: very easy to modify, even by adding at runtime user-defined modules
 which populate the GUI automatically.
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

C++: excellent rendering performance, fully hardware-accelerated OpenGL.
\end_deeper 
\layout Pause

\layout Standard
\align center 

\series bold 
\color red
[DEMO]
\layout Subsection*

Others
\layout BeginFrame

A few other projects (URLs in Appendix)
\layout FrameSubtitle

Python is becoming very popular in many different scientific areas
\layout Itemize


\color blue
VPython:
\color default
 easy, real-time 3D programming (Carnegie Mellon, used for an introductory
 mechanics course).
\layout Itemize


\color blue
UCSF Chimera: 
\color default
extensible, interactive molecular graphics program ($$: NIH).
\layout Itemize


\color blue
PyRAF:
\color default
 Hubble Space Telescope interface to IRAF, a standard in astronomical image
 processing.
 The HST develops Numarray, the next generation Python array library.
\layout Itemize


\color blue
BioPython: 
\color default
tools for computational molecular biology.
\layout Itemize


\color blue
VisionEgg:
\color default
 real-time stimuli for vision research experiments (OpenGL).
\layout Itemize


\color blue
Natural Language Toolkit:
\color default
 symbolic and statistical natural language processing.
\layout Itemize


\color blue
Neural Integrator:
\color default
 visual programming for neural networks.
\layout Itemize


\color blue
Orange:
\color default
 component-based data mining software.
\layout Section

Python and Scientific Computing
\begin_inset OptArg
collapsed false

\layout Standard

Python
\end_inset 


\layout Subsection

Basic features
\begin_inset OptArg
collapsed true

\layout Standard

Python\SpecialChar ~
Basics
\end_inset 


\layout BeginFrame


\begin_inset ERT
status Collapsed

\layout Standard
[label=current]
\end_inset 

Basic Python features
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
{Meaningful indentation, self-documenting, interactive language}
\end_inset 


\begin_deeper 
\layout Itemize

Examples below: IPython (enhanced interactive environment)
\layout Itemize

Exploratory, incremental development, with live debugging on exceptions.
\layout Itemize

Direct access to the filesystem and OS.
\newline 

\family typewriter 
\color blue
In [8]:
\color default
 def hypot(a,b): 
\newline 

\color blue
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...:
\color default
 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
"Return the length of the hypotenuse." 
\newline 

\color blue
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
...:
\color default
 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return sqrt(a**2+b**2) 
\newline 

\color blue
In [9]:
\color default
 pdoc hypot 
\newline 
Return the length of the hypotenuse.
\newline 

\color blue
In [10]:
\color default
 pdef hypot
\newline 
hypot(a, b)
\newline 

\color blue
In [12]:
\color default
 cd talks/0411_mines/ 
\newline 
/home/fperez/talks/0411_mines
\newline 

\color blue
In [13]:
\color default
 ls 
\newline 
0411_python_scicomp.lyx doublependulum.py* ...
\end_deeper 
\layout BeginPlainFrame

Python Basics (2)
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Dictionaries (C-implemented, well optimized hash tables)}
\end_inset 


\begin_deeper 
\layout Itemize

Perfect for building complex, sparse data structures
\family typewriter 
\size small 
\color blue

\newline 
In [21]:
\color default
\SpecialChar ~
dct={'k1':'v1',(3,4):cos,'nest':{1:2}}
\newline 

\color blue
In [22]:
\color default
\SpecialChar ~
dct.keys(),\SpecialChar ~
dct.values()
\newline 

\color red
Out[22]:
\color default
\SpecialChar ~
(['k1', 'nested', (3, 4)], ['v1', {1: 2}, <built-in function cos>])
\newline 

\color blue
In [23]:
\color default
\SpecialChar ~
dct[3,4](pi) 
\newline 

\color red
Out[23]:
\color default
\SpecialChar ~
-1.0
\end_deeper 
\layout Separator

\layout ExampleBlock


\begin_inset ERT
status Open

\layout Standard
<+->{Easy access to C/C++ (via SciPy's 
\backslash 
texttt{weave.inline}) and FORTRAN (
\backslash 
texttt{f2py})}
\end_inset 


\begin_deeper 
\layout Standard


\family typewriter 
\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [26]:
\color default
 code='std::cout << "a is: " << a << std::endl;'
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [27]:
\color default
 a='Hello world'
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [28]:
\color default
 inline(code,['a']) 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

a is: Hello world
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [29]:
\color default
 a=99
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [30]:
\color default
 inline(code,['a']) 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

a is: 99 
\end_deeper 
\layout Subsection

A better development model
\begin_inset OptArg
collapsed true

\layout Standard

Development\SpecialChar ~
Model
\end_inset 


\layout BeginFrame

A different model of development
\layout FrameSubtitle


\emph on 
\color red
Global optimization is the root of all evil
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

Never write `
\family typewriter 
main()
\family default 
' in C anymore: 
\color red
you are optimizing globally!
\begin_deeper 
\layout Itemize

Prototype the code in Python.
\layout Itemize

Wrap existing libraries for Python access and reuse them (Numeric, LAPACK,
 VTK, ...)
\layout Itemize

Identify remaining hot spots via 
\color blue
profiling
\color default
.
\layout Itemize

Rewrite 
\color blue
only
\color default
 the code for those hot spots in C/C++/FORTRAN.
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 

The resulting code will be production-ready: 
\color blue
no throw-away codes
\color default
.
\begin_deeper 
\layout Itemize

Make your code available as a library for 
\color blue
interactive use
\color default
.
\layout Itemize

Integrate plotting, visualization, logging, ..., into your objects.
\end_deeper 
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color blue
Apply this to existing codes
\color default
 
\begin_deeper 
\layout Itemize

Break them into a library core and control layers.
\layout Itemize

Wrap the libraries and expose them to Python.
\layout Itemize

Write all new control as quick, light Python scripts.
\end_deeper 
\layout Section*

Summary
\layout BeginFrame

Summary
\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color blue
Python
\begin_deeper 
\layout Itemize

An excellent language for scientific computing development.
\layout Itemize

Scales from interactive exploration to full-blown production codes.
\layout Itemize

Accessible to scientists who are not professional programmers.
\end_deeper 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vskip0pt plus.5fill
\end_inset 


\layout Itemize


\begin_inset ERT
status Collapsed

\layout Standard
<+->
\end_inset 


\color red
Outlook
\begin_deeper 
\layout Itemize

SciPy, matplotlib, IPython, MayaVi, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

 are moving forward and improving.
\layout Itemize

At the end of the course, you should be able to start using Python productively
 for your work.
\layout Itemize

These projects are all Open Source: if you find a flaw, a bug, or a missing
 feature,
\emph on 
\color blue
 jump on board!
\end_deeper 
\layout EndFrame

\layout Section*
\start_of_appendix 

\begin_inset Note
collapsed false

\layout Standard

All of the following is optional and typically not needed.
\end_inset 

Appendix
\layout Subsection*

URLs
\layout BeginFrame

Some useful URLs
\layout Itemize

A collection of links on Python and Scientific Computing:
\color blue

\newline 

\begin_inset LatexCommand \htmlurl{http://amath.colorado.edu/faculty/fperez/python/scicomp}

\end_inset 


\layout Itemize

SciPy: 
\color blue

\begin_inset LatexCommand \htmlurl{http://www.scipy.org}

\end_inset 


\layout Itemize

IPython, an improved interactive shell
\color blue
:
\newline 

\begin_inset LatexCommand \htmlurl{http://ipython.scipy.org}

\end_inset 


\layout Itemize

Matplotlib, 2d plotting with Matlab syntax
\color blue
:
\newline 

\begin_inset LatexCommand \htmlurl{http://matplotlib.sourceforge.net}

\end_inset 


\layout Itemize

MayaVi, 3d data visualization:
\color blue

\newline 

\begin_inset LatexCommand \htmlurl{http://mayavi.sourceforge.net}

\end_inset 


\layout Itemize

PyX, programmatic PostScript generation (with 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
LaTeX 
\end_inset 

 support)
\color blue
:
\newline 

\begin_inset LatexCommand \htmlurl{http://pyx.sourceforge.net}

\end_inset 


\layout Itemize

F2Py (FORTRAN): 
\color blue

\begin_inset LatexCommand \htmlurl{http://cens.ioc.ee/projects/f2py2e}

\end_inset 


\color default
 
\layout Itemize

SWIG (C/C++ for Python): 
\color blue

\begin_inset LatexCommand \htmlurl{http://swig.org}

\end_inset 


\layout BeginFrame

URLs for projects mentioned earlier
\layout Itemize

VPython, real-time 3D: 
\color blue

\begin_inset LatexCommand \htmlurl{http://vpython.org}

\end_inset 


\layout Itemize

UCSF Chimera - interactive molecular graphics
\color blue
:
\newline 

\begin_inset LatexCommand \htmlurl{http://www.cgl.ucsf.edu/chimera}

\end_inset 


\layout Itemize

PyRAF - Hubble Space Telescope interface to IRAF
\color blue
:
\newline 

\begin_inset LatexCommand \htmlurl{http://www.stsci.edu/resources/software_hardware/pyraf}

\end_inset 


\layout Itemize

BioPython - 
\color blue

\begin_inset LatexCommand \htmlurl{http://biopython.org}

\end_inset 


\layout Itemize

VisionEgg - vision research experiments (OpenGL):
\color blue

\newline 

\begin_inset LatexCommand \htmlurl{http://www.visionegg.org}

\end_inset 


\color default
 
\layout Itemize

Natural Language Toolkit: 
\newline 

\color blue

\begin_inset LatexCommand \htmlurl{http://nltk.sourceforge.net}

\end_inset 


\layout Itemize

Neural Integrator - visual programming for neural networks:
\newline 

\color blue

\begin_inset LatexCommand \htmlurl{http://starship.python.net/crew/seehof/NeuralPython.html}

\end_inset 


\layout Itemize

Orange - component-based data mining:
\newline 

\color blue

\begin_inset LatexCommand \htmlurl{http://www.ailab.si/orange}

\end_inset 


\layout Subsection

Python overview
\layout BeginFrame

An overview of Python's features
\layout FrameSubtitle

A readable, eclectic collection of the best features from many languages.
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
{Data types}
\end_inset 


\begin_deeper 
\layout Itemize

Arbitrary length integers
\newline 

\family typewriter 
\color blue
In [1]:
\color default
\SpecialChar ~
2**64 
\newline 

\color red
Out[1]:
\color default
\SpecialChar ~
18446744073709551616L 
\layout Itemize

Floats (standard C doubles) and complex numbers
\newline 

\family typewriter 
\color blue
In [4]:
\color default
\SpecialChar ~
1j**2 
\newline 

\color red
Out[4]:
\color default
\SpecialChar ~
(-1+0j) 
\layout Itemize

Strings
\newline 

\family typewriter 
\color blue
In [6]:
\color default
\SpecialChar ~
'hello world'.upper() 
\newline 

\color red
Out[6]:
\color default
\SpecialChar ~
'HELLO WORLD' 
\layout Itemize

Lists (arbitrarily nested, variable length)
\newline 

\family typewriter 
\color blue
In [9]:
\color default
\SpecialChar ~
[99,'hello',1j,['sublist'],99].count(99) 
\newline 

\color red
Out[9]:
\color default
\SpecialChar ~
2 
\end_deeper 
\layout BeginFrame

Python Basics (2)
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Data types (cont)}
\end_inset 


\begin_deeper 
\layout Itemize

Dictionaries (C-implemented, well optimized hash tables)
\newline 

\family typewriter 
\size small 
\color blue
In [21]:
\color default
\SpecialChar ~
dct={'k1':'v1',2:'v2',(3,4):math.cos,'nest':{1:2}}
\newline 

\color blue
In [22]:
\color default
\SpecialChar ~
dct.keys() 
\newline 

\color red
Out[22]:
\color default
\SpecialChar ~
['k1', 'nest', 2, (3, 4)]
\newline 

\color blue
In [23]:
\color default
\SpecialChar ~
dct.values() 
\newline 

\color red
Out[23]:
\color default
\SpecialChar ~
['v1', {1: 2}, 'v2', <built-in function cos>]
\newline 

\color blue
In [24]:
\color default
\SpecialChar ~
dct[3,4](math.pi) 
\newline 

\color red
Out[24]:
\color default
\SpecialChar ~
-1.0
\end_deeper 
\layout Separator

\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Strongly, but dynamically typed}
\end_inset 


\begin_deeper 
\layout Itemize

One of its major strengths: extreme flexibility.
\layout Itemize

Slow: everything is checked at runtime.
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{15mm}
\end_inset 

for x in range(10):
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{15mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
print x**2\SpecialChar ~

\family default 
\emph on 
\color blue
# x and ** are checked every time!
\end_deeper 
\layout BeginFrame

Python Basics (3)
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Interactive}
\end_inset 


\begin_deeper 
\layout Itemize

Efficient for exploratory, incremental development.
\layout Itemize

Live debugging on exceptions.
\layout Itemize

Direct access to the filesystem and OS.
\end_deeper 
\layout Separator

\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Clean object system}
\end_inset 


\begin_deeper 
\layout Standard

With multiple inheritance and operator overloading:
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [12]:
\color default
 class simple: 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\color blue
....:
\color default
 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
def __add__(self,other): 
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\color blue
....:
\color default
 \SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
print 'Me plus something else:',other
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [13]:
\color default
 a = simple()
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [14]:
\color default
 a + 34
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

Me plus something else:\SpecialChar ~
34 
\end_deeper 
\layout BeginPlainFrame

Python Basics (4)
\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Functions are first class objects}
\end_inset 


\begin_deeper 
\layout Standard


\family typewriter 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\size small 
def compose(f,g):
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return lambda x: f(g(x))
\end_deeper 
\layout Separator

\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Easy access to C/C++ (with SciPy's weave.inline module)}
\end_inset 


\begin_deeper 
\layout Standard


\family typewriter 
\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [26]:
\color default
 code='std::cout << "a is: " << a << std::endl;'
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [27]:
\color default
 a='Hello world'
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [28]:
\color default
 inline(code,['a']) 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

a is: Hello world
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [29]:
\color default
 a=99
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 


\color blue
In [30]:
\color default
 inline(code,['a']) 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

a is: 99 
\end_deeper 
\layout Separator

\layout ExampleBlock


\begin_inset ERT
status Collapsed

\layout Standard
<+->{Elegant, simple and expressive: quicksort in 3 lines (Nathan Gray)}
\end_inset 


\begin_deeper 
\layout Standard


\family typewriter 
\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

def qsort(L): 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
if len(L) <= 1: return L
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
return qsort( 
\series bold 
\color blue
[
\series default 
 lt for lt in L[1:] if lt < L[0] 
\series bold 
]
\series default 
\color default
 ) + 
\backslash 
 
\newline 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{7mm}
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
[L[0]] + qsort(
\series bold 
\color blue
[
\series default 
ge for ge in L[1:] if ge >= L[0]
\series bold 
]
\series default 
\color default
)
\end_deeper 
\layout EndFrame

\the_end
